# -*- coding: utf-8 -*-
"""Data Visualization with matplotlib - Skeleton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uq165lZkTQSCVZWSyPKU_zBk2gXW8ivV

# 1. BASIC SINGLE LINE PLOT
"""

# The plot method on Pandas Series and DataFrames is just a simple wrapper around plt.plot():

import matplotlib.pyplot as plt
import pandas as pd
import datetime

# Use Pandas read_csv to read crypto daily prices (BTC, ETH, and LTC)

investment_df = pd.read_csv('crypto_daily_prices.csv')
investment_df

# Use matplotlib on the Pandas DataFrame to plot the data

investment_df.plot(x = 'Date', y = 'BTC-USD Price', label = 'Bitcoin Price', linewidth = 3, figsize = (14, 6))
plt.xlabel('Date')
plt.ylabel('Prices ($)')
plt.title('My first Data Visualization')
plt.legend(loc = 'upper right')
plt.grid()

"""**MINI CHALLENGE #1:**
- **Plot similar kind of graph for Ethereum instead**
- **Change the line color to red**

"""

investment_df

investment_df.plot(x = 'Date', y = 'ETH-USD Price', label = 'Ethereum Price', linewidth = 3, color = 'green', figsize = (14, 6))
plt.xlabel('Date')
plt.ylabel('Prices ($)')
plt.title('Ethereum Prices Information')
plt.grid()

"""# 2. DOWNLOAD DATA DIRECTLY FROM YAHOO FINANCE"""

# yfinance library offers an easy, reliable and Pythonic way to download market data from Yahoo finance

# !pip install yfinance
# import yfinance as yf

# List all Ticker Symbols in the list below, let's start with one!
investment_info = ['BTC-USD']

# Specify the start and end dates
startDate = datetime.datetime(2010, 4, 12)
endDate = datetime.datetime(2022, 6, 16)

# Download the data from Yahoo Finance, make sure to reset index!
df = yf.download(investment_info, start = startDate, end = endDate)
df

# Reset index as follows:
df.reset_index()

"""**MINI CHALLENGE #2:**
- **Use Yahoo Finance to download Ethereum data instead of BTC**
- **USe Yahoo Finance to download BTC, ETH, and LTC**
"""

Ethereum_info = ['ETH-USD']

start = datetime.datetime(2010, 5, 20)
end = datetime.datetime(2022, 6, 16)

eth_df = yf.download(Ethereum_info, start = start, end = end)
eth_df
eth_df.reset_index()

crypto_info = ['BTC-USD', 'ETH-USD', 'LTC-USD']

dateStart = datetime.datetime(2010, 5, 20)
dateEnd = datetime.datetime(2022, 6, 16)

crypto_df = yf.download(crypto_info, start = dateStart, end = dateEnd)
crypto_df
crypto_df.reset_index()

"""# 3. MULTIPLE PLOTS"""

# Use Pandas read_csv to read crypto daily prices (BTC, ETH, and LTC)

crypto_df = pd.read_csv('crypto_daily_prices.csv')
crypto_df

crypto_df.plot(x = 'Date', y = ['BTC-USD Price', 'ETH-USD Price'], color = ['green', 'red'] , linewidth = 3, figsize = (14, 6))
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.title('Cryptocurrency Prices')
plt.legend(loc = 'upper right')
plt.grid()



"""**MINI CHALLENGE #3:**
- **Add Litecoin (LTC) to the list and plot similar kind of graph showing all three crypto currencies**
"""

crypto_df = pd.read_csv('crypto_daily_prices.csv')
crypto_df

crypto_df.plot(x = 'Date', y = ['BTC-USD Price', 'ETH-USD Price', 'LTC-USD Price'], linewidth = 2, label = ['BitcoinPrice', 'EthereumPrice', 'LitecoinPrice'], color = ['green', 'blue', 'red'], figsize = (14, 6))
plt.xlabel('Date')
plt.ylabel('Prices ($)')
plt.title('Cryptocurrency Prices')
plt.grid()

crypto_df.plot(x = 'Date', y = ['ETH-USD Price', 'LTC-USD Price'], linewidth = 2, label = ['EthereumPrice', 'LitecoinPrice'], color = ['blue', 'red'], figsize = (14, 6))
plt.xlabel('Date')
plt.ylabel('Prices ($)')
plt.title('Cryptocurrency Prices')
plt.grid()

"""# 4. SUBPLOTS"""

crypto_df.plot(x = 'Date', title = 'Crypto Prices', subplots = True, grid = True, figsize = (15, 25))

"""**MINI CHALLENGE #4:**
- **Try to set subplots = False and examine the output.** 
"""

crypto_df.plot(x = 'Date', title = 'Crypto Prices', subplots = False, grid = True, figsize = (15, 10))

"""# 5. SCATTERPLOT """

# Read daily return data using pandas

daily_return_df = pd.read_csv('crypto_daily_returns.csv')
daily_return_df

# Plot Daily returns of BTC vs. ETH

daily_return_df.plot.scatter('BTC', 'ETH', grid = True, figsize = (12, 7), color = 'purple')

"""**MINI CHALLENGE #5:**
- **Plot the daily returns of BTC vs. LTC**
"""

daily_return_df.plot.scatter('BTC', 'LTC', grid = True, figsize = (12, 6), color = 'black')

"""# 6. PIE CHART"""

# Define a dictionary with all crypto allocation in a portfolio
# Note that total summation = 100% 

my_dict = {'Allocation %': [55, 20, 5, 17, 3]}
my_dict

allocation_df = pd.DataFrame(data = my_dict, index = ['BTC', 'ETH', 'LTC', 'XRP', 'ADA'])
allocation_df

from IPython.core.pylabtools import figsize
# Use matplotlib to plot a pie chart 

allocation_df.plot.pie(y = 'Allocation %', figsize = (8, 8))
plt.title('Crypto Portfolio')

"""**MINI CHALLENGE #6:**
- **Assume that you became bullish on XRP and decided to allocate 60% of your assets in it. You also decided to equally divide the rest of your assets in other coins (BTC, LTC, ADA, and ETH). Change the allocations and plot the pie chart.**
- **Use 'explode' to increase the separation between XRP and the rest of the portfolio (External Research is Required)**
"""

my_dict = {'Allocation %': [10, 10, 10, 60, 10]}
my_dict

allocation_df = pd.DataFrame(data = my_dict, index = ['BTC', 'ETH', 'LTC', 'XRP', 'ADA'])
allocation_df

explode = (0, 0, 0, 0.2, 0)
allocation_df.plot.pie(y = 'Allocation %',figsize = (8, 8), explode = explode)
plt.title('Crypto Portfolio')

"""# 7. HISTOGRAMS"""

# A histogram represents data using bars with various heights
# Each bar groups numbers into specific ranges
# Taller bars show that more data falls within that specific range

daily_return_df = pd.read_csv('crypto_daily_returns.csv')
daily_return_df

mean = daily_return_df['BTC'].mean()
mean

zigma = daily_return_df['BTC'].std()
zigma

daily_return_df['BTC'].plot.hist(bins = 50, figsize = (12, 6), alpha = 0.5)
plt.grid()
plt.title('Histogram mean = ' + str(mean) + ' & zigma = ' + str(zigma))

"""**MINI CHALLENGE #7:**
- **Plot the histogram for ETH returns using 30 bins with red color**

"""

daily_return_df = pd.read_csv('crypto_daily_returns.csv')
daily_return_df

mean = daily_return_df['ETH'].mean()
mean

zigma = daily_return_df['ETH'].std()
zigma

daily_return_df['ETH'].plot.hist(bins = 30, color = 'red', alpha = 0.5, figsize = (12, 6))
plt.grid()
plt.title('Histogram mean = ' + str(mean) + ' & zigma = ' + str(zigma))

"""**FINAL BREAKOUT ROOM CHALLENGE:**
- **Use the stock_daily_prices.csv data that is included in the course/workshop package, plot a graph containing all prices of AAPL, sp500 and GOOG on one graph**
- **Plot a subplot containing all prices of AAPL, sp500 and GOOG in individual graphs**
- **Add legends indicating S&P500, AAPL and GOOG**
- **Place the legend in the "upper center" location** 

"""

stock_price_df = pd.read_csv('stock_daily_prices.csv')
stock_price_df

stock_price_df.plot(x = 'Date', y = ['AAPL', 'sp500', 'GOOG'], linewidth = 2.5, figsize = (12, 6), color = ['orange', 'green', 'blue'])
plt.xlabel('Date')
plt.ylabel('Prices ($)')
plt.title('Stock Prices')
plt.legend(loc = 'upper center')

stock_price_df.plot(x = 'Date', y = ['AAPL', 'sp500', 'GOOG'], label = ['AAPL', 'GOOG', 'SP500'], subplots = True, figsize = (15, 10), color = ['orange', 'green', 'blue'])
plt.xlabel('Date')
plt.ylabel('Prices ($)')
plt.title('Stock Prices')
plt.legend(loc = 'upper center')